<!-- 
    Policy fragment to implement a round-robin load balancing algorithm.

    Expected named values
    - payg-endpoint-1,payg-endpoint-2: The backend endpoints to be load balanced.
 -->
<fragment>
    <!-- Backend counter is persisted in the cache, enabling a stateful loop across various requests -->
	<cache-lookup-value key="backend-counter" variable-name="backend-counter" default-value="@(0)" />
	<set-variable name="backend-counter" value="@(((int)context.Variables["backend-counter"])+1)" />
	<cache-store-value key="backend-counter" value="@((int)context.Variables["backend-counter"])" duration="1200" />

    <!-- backend pool contains all the Azure OpenAI backends, that needs to be load balanced. -->
	<set-variable name="backend-pool" value="@{
            JArray backends = new JArray();
            backends.Add("{{payg-endpoint-1}}");
            backends.Add("{{payg-endpoint-2}}");
            return backends;
        }" />
	
    <!-- select the backend URL from the pool for this request -->
    <set-variable name="total-backend-count" value="@(((JArray)context.Variables["backend-pool"]).Count)" />
	<set-variable name="chosen-index" value="@((int)context.Variables["backend-counter"]%(int)context.Variables["total-backend-count"])" />
	<set-variable name="selected-url" value="@(((JArray)context.Variables["backend-pool"])[(int)context.Variables["chosen-index"]].ToString())" />

    <!-- set the backend service URL to the selected backend URL -->
    
    <set-header name="api-key" exists-action="override">
        <value>{{ptu-key-1}}</value>
    </set-header>
	<set-backend-service base-url="@((string)context.Variables["selected-url"])" />
</fragment>